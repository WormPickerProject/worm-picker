// generated from rosidl_adapter/resource/msg.idl.em
// with input from motoros2_interfaces/msg/MotionReadyEnum.msg
// generated code does not contain a copyright notice


module motoros2_interfaces {
  module msg {
    module MotionReadyEnum_Constants {
      @verbatim (language="comment", text=
        "Result codes which may be returned by services and actions which attempt to" "\n"        "execute motion (or are executing motion)." "\n"        "" "\n"        "Values other than 1 would indicate an active error or other active inhibition" "\n"        "on the Yaskawa controller preventing MotoROS2 from enabling trajectory mode" "\n"        "or executing any motion." "\n"        "" "\n"        "Applications are encouraged to refer to the named constants generated by" "\n"        "rosidl as part of this message instead of using the integer values directly.")
      const uint16 READY = 1;
      const string READY_STR = "Ready";
      const uint16 NOT_READY_UNSPECIFIED = 100;
      const string NOT_READY_UNSPECIFIED_STR = "Unspecified";
      const uint16 NOT_READY_ALARM = 101;
      const string NOT_READY_ALARM_STR = "The controller has an active Alarm";
      const uint16 NOT_READY_ERROR = 102;
      const string NOT_READY_ERROR_STR = "The controller has an active Error";
      const uint16 NOT_READY_ESTOP = 103;
      const string NOT_READY_ESTOP_STR = "The controller is in E-Stop";
      const uint16 NOT_READY_NOT_PLAY = 104;
      const string NOT_READY_NOT_PLAY_STR = "The teach pendant must not be in TEACH mode";
      const uint16 NOT_READY_NOT_REMOTE = 105;
      const string NOT_READY_NOT_REMOTE_STR = "The teach pendant must be in REMOTE mode";
      const uint16 NOT_READY_SERVO_OFF = 106;
      const string NOT_READY_SERVO_OFF_STR = "Servo power is OFF. Please call start_traj_mode or start_point_queue_mode service";
      const uint16 NOT_READY_HOLD = 107;
      const string NOT_READY_HOLD_STR = "The controller is in HOLD";
      const uint16 NOT_READY_JOB_NOT_STARTED = 108;
      const string NOT_READY_JOB_NOT_STARTED_STR = "The INIT_ROS job has not started. Please call start_traj_mode or start_point_queue_mode service";
      const uint16 NOT_READY_NOT_ON_WAIT_CMD = 109;
      const string NOT_READY_NOT_ON_WAIT_CMD_STR = "INFORM job is not on a WAIT command. Check the format of INIT_ROS";
      const uint16 NOT_READY_PFL_ACTIVE = 111;
      const string NOT_READY_PFL_ACTIVE_STR = "A PFL event has occurred. Please return the robot to a safe state";
      const uint16 NOT_READY_INC_MOVE_ERROR = 112;
      const string NOT_READY_INC_MOVE_ERROR_STR = "The controller is in an error state. Please call reset_error to attempt to clear the error";
      const uint16 NOT_READY_OTHER_PROGRAM_RUNNING = 113;
      const string NOT_READY_OTHER_PROGRAM_RUNNING_STR = "Controller is running another job";
      const uint16 NOT_READY_OTHER_TRAJ_MODE_ACTIVE = 114;
      const string NOT_READY_OTHER_TRAJ_MODE_ACTIVE_STR = "Another trajectory mode is already active. Please call stop_traj_mode service";
      const uint16 NOT_READY_NOT_CONT_CYCLE_MODE = 115;
      const string NOT_READY_NOT_CONT_CYCLE_MODE_STR = "AUTO cycle mode not set. Please set the cycle mode to AUTO";
      const uint16 NOT_READY_MAJOR_ALARM = 116;
      const string NOT_READY_MAJOR_ALARM_STR = "Major Alarms can't be reset. Please check the teach pendant";
      const uint16 NOT_READY_ECO_MODE = 117;
      const string NOT_READY_ECO_MODE_STR = "Couldn't disable eco mode";
      const uint16 NOT_READY_SERVO_ON_TIMEOUT = 118;
      const string NOT_READY_SERVO_ON_TIMEOUT_STR = "Timed out while waiting for servo on";
    };
    @verbatim (language="comment", text=
      "SPDX-FileCopyrightText: 2022-2023, Yaskawa America, Inc." "\n"
      "SPDX-FileCopyrightText: 2022-2023, Delft University of Technology" "\n"
      "" "\n"
      "SPDX-License-Identifier: Apache-2.0")
    struct MotionReadyEnum {
      uint16 value;
    };
  };
};
